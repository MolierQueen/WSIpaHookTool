#if 0
#elif defined(__arm64e__) && __arm64e__
// Generated by Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Alderis",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC7Alderis21BottomSheetTransition")
@interface BottomSheetTransition : NSObject <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;

SWIFT_CLASS("_TtC7Alderis32BottomSheetTransitioningDelegate")
@interface BottomSheetTransitioningDelegate : NSObject <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSCoder;
@class UITraitCollection;
@class UIAction;

/// ColorWell can be used to present the userâ€™s color selection in your user interface. It
/// optionally also supports drag-and-drop operations.
/// By default, drop interactions are supported, which causes a <code>UIControl.Event.valueChanged</code> event
/// to be emitted. Optionally, drag operations can be enabled, allowing the color to be dropped
/// elsewhere.
/// You can also use <code>UIControl.Event.touchUpInside</code> to perform an action, such as to initialise
/// and present an instance of <code>ColorPickerViewController</code>.
SWIFT_CLASS_NAMED("ColorWell")
@interface HBColorWell : UIControl
/// Set the color to be displayed by the view.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Override the default border color if desired.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// Whether the user can begin a drag interaction from this view, allowing them to drop the color
/// into a supporting app. The default is false.
@property (nonatomic) BOOL isDragInteractionEnabled;
/// Whether the user can end a drag interaction by dropping on this view, allowing them to drag a
/// color from a supporting app onto this view. The default is true.
/// To handle a color being dropped on this view, add an action for the <code>.valueChanged</code> event. For
/// example:
/// \code
/// circleView.addTarget(self, action: #selector(self.handleColorDropEvent(_:)), for: .valueChanged)
///
/// \endcode
@property (nonatomic) BOOL isDropInteractionEnabled;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// :nodoc:
- (void)addAction:(UIAction * _Nonnull)action forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
/// :nodoc:
- (void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action forControlEvents:(UIControlEvents)controlEvents;
/// :nodoc:
- (void)removeAction:(UIAction * _Nonnull)action forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
/// :nodoc:
- (void)removeActionForIdentifier:(UIActionIdentifier _Nonnull)actionIdentifier forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
@end


/// Deprecated. Use <code>ColorWell</code> instead.
SWIFT_CLASS_NAMED("ColorPickerCircleView") SWIFT_DEPRECATED_MSG("", "HBColorWell")
@interface HBColorPickerCircleView : HBColorWell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7Alderis21ColorPickerSliderBase")
@interface ColorPickerSliderBase : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)sliderChanged;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis26ColorPickerComponentSlider")
@interface ColorPickerComponentSlider : ColorPickerSliderBase
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum HBColorPickerTab : NSInteger;

/// ColorPickerConfiguration is used to configure an instance of <code>ColorPickerViewController</code>.
SWIFT_CLASS_NAMED("ColorPickerConfiguration")
@interface HBColorPickerConfiguration : NSObject
/// Initialise a configuration object with the required color property configured.
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
/// The initial color to use when launching the color picker. Required. If you donâ€™t have a value
/// set yet, provide a sensible default.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Whether to allow the user to set an alpha transparency value on the color. This controls the
/// visibility of an Alpha slider on the Sliders tab. When set to false, alpha values provided via
/// the <code>color</code> property, or by the user when entering a hexadecimal value on the Sliders tab,
/// will be discarded.
@property (nonatomic) BOOL supportsAlpha;
/// The title to display at the top of the popup. If set to nil, no title will be displayed. The
/// default is nil.
@property (nonatomic, copy) NSString * _Nullable title;
/// The initial tab to select when the color picker is presented. The default is
/// <code>ColorPickerTab.swatch</code>.
/// This value must be found in <code>visibleTabs</code>.
/// <ul>
///   <li>
///     see: <code>visibleTabs</code>
///   </li>
/// </ul>
@property (nonatomic) enum HBColorPickerTab initialTab;
/// Maps visibleTabs to Objective-C due to Swift limitations. This is an implementation detail.
/// Ignore this and use visibleTabs per usual.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull visibleTabs;
/// Whether to display the tab selection at the top of the popup. The default is true. When set to
/// false, the user will only be able to access the tab specified in initialTab.
@property (nonatomic) BOOL showTabs;
/// When the Smart Invert accessibility feature is enabled, Alderis instructs the system to not
/// invert most of its user interface. This ensures the user can make a more accurate color
/// selection. If this behavior is not desired, you can disable it here.
@property (nonatomic) BOOL overrideSmartInvert;
/// Whether the user can end a drag interaction by dropping on the color picker window, allowing
/// them to drag a color from a supporting app. The default is true.
@property (nonatomic) BOOL isDropInteractionEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HBColorPickerViewController;

/// Use ColorPickerDelegate to handle the userâ€™s response to <code>ColorPickerViewController</code>.
SWIFT_PROTOCOL_NAMED("ColorPickerDelegate")
@protocol HBColorPickerDelegate <NSObject>
@optional
/// Informs the delegate that the user has selected a color in the color picker. Optional.
/// Use this to update your user interface with the new color value, if suitable to your use case.
/// You should, at minimum, implement either this method or <code>colorPicker(_:didAccept:)</code>. If you
/// donâ€™t intend to implement this method, it is expected that you implement
/// <code>colorPicker(_:didAccept:)</code>. If you implement this method and the user selects Cancel, this
/// method will be called with the initial color passed in via <code>ColorPickerConfiguration.color</code> to
/// undo the selection.
/// <ul>
///   <li>
///     see: <code>colorPicker(_:didAccept:)</code>
///   </li>
/// </ul>
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
/// \param color The <code>UIColor</code> selection the user made.
///
- (void)colorPicker:(HBColorPickerViewController * _Nonnull)colorPicker didSelectColor:(UIColor * _Nonnull)color;
/// Informs the delegate that the user has dismissed the color picker with a positive response,
/// having selected the selected color. Optional.
/// You should, at minimum, implement either this method or <code>colorPicker(_:didSelect:)</code>.
/// <ul>
///   <li>
///     see: <code>colorPicker(_:didSelect:)</code>
///   </li>
/// </ul>
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
/// \param color The <code>UIColor</code> selection the user made.
///
- (void)colorPicker:(HBColorPickerViewController * _Nonnull)colorPicker didAcceptColor:(UIColor * _Nonnull)color;
/// Informs the delegate that the user has dismissed the color picker with a negative response.
/// Optional.
/// You usually do not need to handle this condition.
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
- (void)colorPickerDidCancel:(HBColorPickerViewController * _Nonnull)colorPicker;
@end

@protocol UIContentContainer;
@class NSBundle;

SWIFT_CLASS("_TtC7Alderis30ColorPickerInnerViewController")
@interface ColorPickerInnerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewDidLayoutSubviews;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (void)saveTapped;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UIPresentationController;

@interface ColorPickerInnerViewController (SWIFT_EXTENSION(Alderis)) <UIPopoverPresentationControllerDelegate>
- (void)presentationControllerWillDismiss:(UIPresentationController * _Nonnull)presentationController;
@end

@class UIDropInteraction;
@protocol UIDropSession;
@class UIDropProposal;

@interface ColorPickerInnerViewController (SWIFT_EXTENSION(Alderis)) <UIDropInteractionDelegate>
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end


SWIFT_CLASS("_TtC7Alderis20ColorPickerMapSlider")
@interface ColorPickerMapSlider : ColorPickerComponentSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7Alderis32ColorPickerTabViewControllerBase")
@interface ColorPickerTabViewControllerBase : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis28ColorPickerMapViewController")
@interface ColorPickerMapViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC7Alderis24ColorPickerNumericSlider")
@interface ColorPickerNumericSlider : ColorPickerComponentSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

@interface ColorPickerNumericSlider (SWIFT_EXTENSION(Alderis)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


@class UISegmentedControl;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC7Alderis32ColorPickerSlidersViewController")
@interface ColorPickerSlidersViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)segmentControlChanged:(UISegmentedControl * _Nonnull)sender;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)sliderChanged:(ColorPickerNumericSlider * _Nonnull)slider;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ColorPickerSlidersViewController (SWIFT_EXTENSION(Alderis)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7Alderis31ColorPickerSwatchViewController")
@interface ColorPickerSwatchViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// An enumeration of the tabs <code>ColorPickerViewController</code> features. Use these enumeration values to
/// set tab-related settings on ColorPickerConfiguration.
typedef SWIFT_ENUM_NAMED(NSInteger, HBColorPickerTab, "ColorPickerTab", open) {
/// Tab 1: A grid of 9 variations of 11 colours, and a grayscale ramp. The first and default tab.
  HBColorPickerTabSwatch = 0,
/// Tab 2: A color wheel displaying every possible hue and saturation combination. The user can
/// additionally adjust the brightness of the colour using a slider.
  HBColorPickerTabMap = 1,
/// Tab 3: A set of sliders for red, green, and blue color values, which can be switched to hue,
/// saturation, and brightness. The user can additionally copy or enter a color value expressed
/// using a CSS-style hexadecimal string, and adjust alpha transparency.
  HBColorPickerTabSliders = 2,
};



/// Provides the Color Picker user interface.
/// Present this view controller to display the color picker. Do not push it onto a navigation
/// controller stack. In horizontally and vertically regular size class environments, for instance
/// on iPad and Mac, the picker will be presented as a popover. This means that you must set
/// <code>sourceView</code> or other similar properties on the view controllerâ€™s <code>popoverPresentationController</code>
/// before presentation.
/// To review examples of ColorPickerViewController in use, run <code>pod try Alderis</code>.
SWIFT_CLASS_NAMED("ColorPickerViewController")
@interface HBColorPickerViewController : UIViewController
/// The delegate that will receive the userâ€™s selection upon tapping the Done button, or a
/// cancellation upon tapping the Cancel button.
@property (nonatomic, weak) id <HBColorPickerDelegate> _Nullable delegate;
/// The configuration of the color picker. Use this to set the initially selected color, as well
/// as other behavioral options.
/// Making changes to this value or its properties after the color picker interface has been
/// presented may result in undefined behavior.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration</code>
///   </li>
/// </ul>
@property (nonatomic, strong) HBColorPickerConfiguration * _Null_unspecified configuration;
/// Deprecated. Set overrideSmartInvert on the <code>ColorPickerConfiguration</code> instead.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration.overrideSmartInvert</code>
///   </li>
/// </ul>
@property (nonatomic) BOOL overrideSmartInvert SWIFT_DEPRECATED_MSG("Use ColorPickerConfiguration instead");
/// Deprecated. Set color on the <code>ColorPickerConfiguration</code> instead.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration.color</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull color SWIFT_DEPRECATED_MSG("Use ColorPickerConfiguration instead");
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
- (void)viewSafeAreaInsetsDidChange;
/// :nodoc:
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


SWIFT_CLASS("_TtC7Alderis20ColorPickerWheelView")
@interface ColorPickerWheelView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class UIDragInteraction;
@protocol UIDragSession;
@class UIDragItem;

@interface HBColorWell (SWIFT_EXTENSION(Alderis)) <UIDragInteractionDelegate>
/// :nodoc:
- (NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForBeginningSession:(id <UIDragSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end


@interface HBColorWell (SWIFT_EXTENSION(Alderis)) <UIDropInteractionDelegate>
/// :nodoc:
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end


SWIFT_CLASS("_TtC7Alderis12DialogButton")
@interface DialogButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis13SeparatorView")
@interface SeparatorView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(Alderis))
/// Maps <code>init(propertyListValue:)</code> to Objective-C due to Swift limitations. This is an
/// implementation detail. Ignore this and use <code>UIColor(propertyListValue:)</code> or
/// <code>-[UIColor initWithHbcp_propertyListValue:]</code> as per usual.
/// <ul>
///   <li>
///     see: <code>init(propertyListValue:)</code>
///   </li>
/// </ul>
/// \param value The object to retrieve data from. See the discussion for the supported
/// object types.
///
///
/// returns:
/// An initialized color object, or nil if the value does not conform to the expected
/// type. The color information represented by this object is in the device RGB colorspace.
/// device RGB colorspace.
- (nullable instancetype)initWithHbcp_propertyListValue:(id _Nullable)propertyListValue;
/// Returns a string that represents the color.
/// The output is a string in the format <code>#AABBCC:0.5</code>, where the initial <code>#AABBCC</code> portion is a
/// 6-character CSS-style hex string, and the final <code>:0.5</code> portion represents the alpha value. If
/// the colorâ€™s alpha value is <code>1</code>, the alpha portion is excluded.
/// If the color is dynamic, for instance if it is a UIKit system color, or initialised via
/// <code>UIColor(dynamicProvider:)</code>, the color that matches the current trait collection is used.
/// <ul>
///   <li>
///     see: <code>init(propertyListValue:)</code>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the color, in the format discussed above.
@property (nonatomic, readonly, copy) NSString * _Nonnull hbcp_propertyListValue;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Alderis",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC7Alderis21BottomSheetTransition")
@interface BottomSheetTransition : NSObject <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;

SWIFT_CLASS("_TtC7Alderis32BottomSheetTransitioningDelegate")
@interface BottomSheetTransitioningDelegate : NSObject <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSCoder;
@class UITraitCollection;
@class UIAction;

/// ColorWell can be used to present the userâ€™s color selection in your user interface. It
/// optionally also supports drag-and-drop operations.
/// By default, drop interactions are supported, which causes a <code>UIControl.Event.valueChanged</code> event
/// to be emitted. Optionally, drag operations can be enabled, allowing the color to be dropped
/// elsewhere.
/// You can also use <code>UIControl.Event.touchUpInside</code> to perform an action, such as to initialise
/// and present an instance of <code>ColorPickerViewController</code>.
SWIFT_CLASS_NAMED("ColorWell")
@interface HBColorWell : UIControl
/// Set the color to be displayed by the view.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Override the default border color if desired.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// Whether the user can begin a drag interaction from this view, allowing them to drop the color
/// into a supporting app. The default is false.
@property (nonatomic) BOOL isDragInteractionEnabled;
/// Whether the user can end a drag interaction by dropping on this view, allowing them to drag a
/// color from a supporting app onto this view. The default is true.
/// To handle a color being dropped on this view, add an action for the <code>.valueChanged</code> event. For
/// example:
/// \code
/// circleView.addTarget(self, action: #selector(self.handleColorDropEvent(_:)), for: .valueChanged)
///
/// \endcode
@property (nonatomic) BOOL isDropInteractionEnabled;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// :nodoc:
- (void)addAction:(UIAction * _Nonnull)action forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
/// :nodoc:
- (void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action forControlEvents:(UIControlEvents)controlEvents;
/// :nodoc:
- (void)removeAction:(UIAction * _Nonnull)action forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
/// :nodoc:
- (void)removeActionForIdentifier:(UIActionIdentifier _Nonnull)actionIdentifier forControlEvents:(UIControlEvents)controlEvents SWIFT_AVAILABILITY(maccatalyst,introduced=14) SWIFT_AVAILABILITY(ios,introduced=14);
@end


/// Deprecated. Use <code>ColorWell</code> instead.
SWIFT_CLASS_NAMED("ColorPickerCircleView") SWIFT_DEPRECATED_MSG("", "HBColorWell")
@interface HBColorPickerCircleView : HBColorWell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7Alderis21ColorPickerSliderBase")
@interface ColorPickerSliderBase : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)sliderChanged;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis26ColorPickerComponentSlider")
@interface ColorPickerComponentSlider : ColorPickerSliderBase
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum HBColorPickerTab : NSInteger;

/// ColorPickerConfiguration is used to configure an instance of <code>ColorPickerViewController</code>.
SWIFT_CLASS_NAMED("ColorPickerConfiguration")
@interface HBColorPickerConfiguration : NSObject
/// Initialise a configuration object with the required color property configured.
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
/// The initial color to use when launching the color picker. Required. If you donâ€™t have a value
/// set yet, provide a sensible default.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Whether to allow the user to set an alpha transparency value on the color. This controls the
/// visibility of an Alpha slider on the Sliders tab. When set to false, alpha values provided via
/// the <code>color</code> property, or by the user when entering a hexadecimal value on the Sliders tab,
/// will be discarded.
@property (nonatomic) BOOL supportsAlpha;
/// The title to display at the top of the popup. If set to nil, no title will be displayed. The
/// default is nil.
@property (nonatomic, copy) NSString * _Nullable title;
/// The initial tab to select when the color picker is presented. The default is
/// <code>ColorPickerTab.swatch</code>.
/// This value must be found in <code>visibleTabs</code>.
/// <ul>
///   <li>
///     see: <code>visibleTabs</code>
///   </li>
/// </ul>
@property (nonatomic) enum HBColorPickerTab initialTab;
/// Maps visibleTabs to Objective-C due to Swift limitations. This is an implementation detail.
/// Ignore this and use visibleTabs per usual.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull visibleTabs;
/// Whether to display the tab selection at the top of the popup. The default is true. When set to
/// false, the user will only be able to access the tab specified in initialTab.
@property (nonatomic) BOOL showTabs;
/// When the Smart Invert accessibility feature is enabled, Alderis instructs the system to not
/// invert most of its user interface. This ensures the user can make a more accurate color
/// selection. If this behavior is not desired, you can disable it here.
@property (nonatomic) BOOL overrideSmartInvert;
/// Whether the user can end a drag interaction by dropping on the color picker window, allowing
/// them to drag a color from a supporting app. The default is true.
@property (nonatomic) BOOL isDropInteractionEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HBColorPickerViewController;

/// Use ColorPickerDelegate to handle the userâ€™s response to <code>ColorPickerViewController</code>.
SWIFT_PROTOCOL_NAMED("ColorPickerDelegate")
@protocol HBColorPickerDelegate <NSObject>
@optional
/// Informs the delegate that the user has selected a color in the color picker. Optional.
/// Use this to update your user interface with the new color value, if suitable to your use case.
/// You should, at minimum, implement either this method or <code>colorPicker(_:didAccept:)</code>. If you
/// donâ€™t intend to implement this method, it is expected that you implement
/// <code>colorPicker(_:didAccept:)</code>. If you implement this method and the user selects Cancel, this
/// method will be called with the initial color passed in via <code>ColorPickerConfiguration.color</code> to
/// undo the selection.
/// <ul>
///   <li>
///     see: <code>colorPicker(_:didAccept:)</code>
///   </li>
/// </ul>
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
/// \param color The <code>UIColor</code> selection the user made.
///
- (void)colorPicker:(HBColorPickerViewController * _Nonnull)colorPicker didSelectColor:(UIColor * _Nonnull)color;
/// Informs the delegate that the user has dismissed the color picker with a positive response,
/// having selected the selected color. Optional.
/// You should, at minimum, implement either this method or <code>colorPicker(_:didSelect:)</code>.
/// <ul>
///   <li>
///     see: <code>colorPicker(_:didSelect:)</code>
///   </li>
/// </ul>
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
/// \param color The <code>UIColor</code> selection the user made.
///
- (void)colorPicker:(HBColorPickerViewController * _Nonnull)colorPicker didAcceptColor:(UIColor * _Nonnull)color;
/// Informs the delegate that the user has dismissed the color picker with a negative response.
/// Optional.
/// You usually do not need to handle this condition.
/// \param colorPicker The <code>ColorPickerViewController</code> instance that triggered the action.
///
- (void)colorPickerDidCancel:(HBColorPickerViewController * _Nonnull)colorPicker;
@end

@protocol UIContentContainer;
@class NSBundle;

SWIFT_CLASS("_TtC7Alderis30ColorPickerInnerViewController")
@interface ColorPickerInnerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewDidLayoutSubviews;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (void)saveTapped;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UIPresentationController;

@interface ColorPickerInnerViewController (SWIFT_EXTENSION(Alderis)) <UIPopoverPresentationControllerDelegate>
- (void)presentationControllerWillDismiss:(UIPresentationController * _Nonnull)presentationController;
@end

@class UIDropInteraction;
@protocol UIDropSession;
@class UIDropProposal;

@interface ColorPickerInnerViewController (SWIFT_EXTENSION(Alderis)) <UIDropInteractionDelegate>
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end


SWIFT_CLASS("_TtC7Alderis20ColorPickerMapSlider")
@interface ColorPickerMapSlider : ColorPickerComponentSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7Alderis32ColorPickerTabViewControllerBase")
@interface ColorPickerTabViewControllerBase : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis28ColorPickerMapViewController")
@interface ColorPickerMapViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC7Alderis24ColorPickerNumericSlider")
@interface ColorPickerNumericSlider : ColorPickerComponentSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

@interface ColorPickerNumericSlider (SWIFT_EXTENSION(Alderis)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


@class UISegmentedControl;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC7Alderis32ColorPickerSlidersViewController")
@interface ColorPickerSlidersViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)segmentControlChanged:(UISegmentedControl * _Nonnull)sender;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)sliderChanged:(ColorPickerNumericSlider * _Nonnull)slider;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ColorPickerSlidersViewController (SWIFT_EXTENSION(Alderis)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7Alderis31ColorPickerSwatchViewController")
@interface ColorPickerSwatchViewController : ColorPickerTabViewControllerBase
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// An enumeration of the tabs <code>ColorPickerViewController</code> features. Use these enumeration values to
/// set tab-related settings on ColorPickerConfiguration.
typedef SWIFT_ENUM_NAMED(NSInteger, HBColorPickerTab, "ColorPickerTab", open) {
/// Tab 1: A grid of 9 variations of 11 colours, and a grayscale ramp. The first and default tab.
  HBColorPickerTabSwatch = 0,
/// Tab 2: A color wheel displaying every possible hue and saturation combination. The user can
/// additionally adjust the brightness of the colour using a slider.
  HBColorPickerTabMap = 1,
/// Tab 3: A set of sliders for red, green, and blue color values, which can be switched to hue,
/// saturation, and brightness. The user can additionally copy or enter a color value expressed
/// using a CSS-style hexadecimal string, and adjust alpha transparency.
  HBColorPickerTabSliders = 2,
};



/// Provides the Color Picker user interface.
/// Present this view controller to display the color picker. Do not push it onto a navigation
/// controller stack. In horizontally and vertically regular size class environments, for instance
/// on iPad and Mac, the picker will be presented as a popover. This means that you must set
/// <code>sourceView</code> or other similar properties on the view controllerâ€™s <code>popoverPresentationController</code>
/// before presentation.
/// To review examples of ColorPickerViewController in use, run <code>pod try Alderis</code>.
SWIFT_CLASS_NAMED("ColorPickerViewController")
@interface HBColorPickerViewController : UIViewController
/// The delegate that will receive the userâ€™s selection upon tapping the Done button, or a
/// cancellation upon tapping the Cancel button.
@property (nonatomic, weak) id <HBColorPickerDelegate> _Nullable delegate;
/// The configuration of the color picker. Use this to set the initially selected color, as well
/// as other behavioral options.
/// Making changes to this value or its properties after the color picker interface has been
/// presented may result in undefined behavior.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration</code>
///   </li>
/// </ul>
@property (nonatomic, strong) HBColorPickerConfiguration * _Null_unspecified configuration;
/// Deprecated. Set overrideSmartInvert on the <code>ColorPickerConfiguration</code> instead.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration.overrideSmartInvert</code>
///   </li>
/// </ul>
@property (nonatomic) BOOL overrideSmartInvert SWIFT_DEPRECATED_MSG("Use ColorPickerConfiguration instead");
/// Deprecated. Set color on the <code>ColorPickerConfiguration</code> instead.
/// <ul>
///   <li>
///     see: <code>ColorPickerConfiguration.color</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull color SWIFT_DEPRECATED_MSG("Use ColorPickerConfiguration instead");
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
- (void)viewSafeAreaInsetsDidChange;
/// :nodoc:
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


SWIFT_CLASS("_TtC7Alderis20ColorPickerWheelView")
@interface ColorPickerWheelView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class UIDragInteraction;
@protocol UIDragSession;
@class UIDragItem;

@interface HBColorWell (SWIFT_EXTENSION(Alderis)) <UIDragInteractionDelegate>
/// :nodoc:
- (NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForBeginningSession:(id <UIDragSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end


@interface HBColorWell (SWIFT_EXTENSION(Alderis)) <UIDropInteractionDelegate>
/// :nodoc:
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end


SWIFT_CLASS("_TtC7Alderis12DialogButton")
@interface DialogButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7Alderis13SeparatorView")
@interface SeparatorView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(Alderis))
/// Maps <code>init(propertyListValue:)</code> to Objective-C due to Swift limitations. This is an
/// implementation detail. Ignore this and use <code>UIColor(propertyListValue:)</code> or
/// <code>-[UIColor initWithHbcp_propertyListValue:]</code> as per usual.
/// <ul>
///   <li>
///     see: <code>init(propertyListValue:)</code>
///   </li>
/// </ul>
/// \param value The object to retrieve data from. See the discussion for the supported
/// object types.
///
///
/// returns:
/// An initialized color object, or nil if the value does not conform to the expected
/// type. The color information represented by this object is in the device RGB colorspace.
/// device RGB colorspace.
- (nullable instancetype)initWithHbcp_propertyListValue:(id _Nullable)propertyListValue;
/// Returns a string that represents the color.
/// The output is a string in the format <code>#AABBCC:0.5</code>, where the initial <code>#AABBCC</code> portion is a
/// 6-character CSS-style hex string, and the final <code>:0.5</code> portion represents the alpha value. If
/// the colorâ€™s alpha value is <code>1</code>, the alpha portion is excluded.
/// If the color is dynamic, for instance if it is a UIKit system color, or initialised via
/// <code>UIColor(dynamicProvider:)</code>, the color that matches the current trait collection is used.
/// <ul>
///   <li>
///     see: <code>init(propertyListValue:)</code>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the color, in the format discussed above.
@property (nonatomic, readonly, copy) NSString * _Nonnull hbcp_propertyListValue;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
